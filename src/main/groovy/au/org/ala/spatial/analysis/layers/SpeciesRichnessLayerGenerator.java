package au.org.ala.spatial.analysis.layers;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.BitSet;
import java.util.Map;

import static java.math.BigDecimal.ROUND_FLOOR;

public class SpeciesRichnessLayerGenerator extends CalculatedLayerGenerator {

    public SpeciesRichnessLayerGenerator(BigDecimal resolution, File cellSpeciesFile) throws IOException {
        super(resolution);
        readCoordinateSpeciesFlatFile(cellSpeciesFile, false, false, true, false);
    }

    public static void main(String[] args) throws Exception {
        try {
            if (args.length == 0) {
                System.out.println("args[0]=Resolution in degrees, e.g. 0.1 for 0.1 by 0.1 degree cells\n"
                        + "args[1]=Path to cell species list file (should be generated by biocache store via jenkins - file resolution must match the resolution provided to this tool)\n"
                        + "args[2]=Path of directory in which to write output files\n" + "args[3]=Prefix to use for names of output files.\n");

                return;
            }

            BigDecimal resolution = new BigDecimal(args[0]).setScale(2, ROUND_FLOOR);
            File cellSpeciesFile = new File(args[1]);
            File outputFileDirectory = new File(args[2]);
            String outputFileNamePrefix = args[3];

            new SpeciesRichnessLayerGenerator(resolution, cellSpeciesFile).writeGrid(outputFileDirectory, outputFileNamePrefix);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected float handleCell(Map.Entry<BigDecimal, BigDecimal> coordPair, float maxValue, PrintWriter ascPrintWriter, BufferedOutputStream divaOutputStream) throws IOException {
        if (_cellSpecies.containsKey(coordPair)) {
            // Write species richness value for the cell. This is the number of
            // species for which there are occurrences recorded in the cell.

            BitSet speciesLsids = _cellSpecies.get(coordPair);
            int cellSpeciesCount = speciesLsids.cardinality();

            float newMaxValue = 0;
            if (maxValue < cellSpeciesCount) {
                newMaxValue = cellSpeciesCount;
            } else {
                newMaxValue = maxValue;
            }

            ascPrintWriter.print(cellSpeciesCount);

            ByteBuffer bb = ByteBuffer.wrap(new byte[Float.SIZE / Byte.SIZE]);
            bb.order(ByteOrder.LITTLE_ENDIAN);
            bb.putFloat(cellSpeciesCount);
            divaOutputStream.write(bb.array());

            return newMaxValue;
        } else {
            // No species occurrences in this cell. Species richness value
            // is zero.
            ascPrintWriter.print("0");

            ByteBuffer bb = ByteBuffer.wrap(new byte[Float.SIZE / Byte.SIZE]);
            bb.order(ByteOrder.LITTLE_ENDIAN);
            bb.putFloat(0);
            divaOutputStream.write(bb.array());
            return maxValue;
        }
    }
}
