import org.gradle.api.plugins.JavaBasePlugin
import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.tasks.testing.Test

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repository.jboss.org/" }
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://nexus.ala.org.au/content/groups/public/" }

    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:7.0.0"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.2"
    }
}

plugins {
    id 'war'
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "chromeHeadless"]
}

version "1.1.0-SNAPSHOT"
group "au.org.ala"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.bertramlabs.asset-pipeline"

war {
    enabled=true
}

springBoot {
    mainClassName = "au.org.ala.spatial.service.Application"
}

buildProperties {
    inputs.property("info.app.build.date", new Date().format('yyyy-MM-dd HH:mm:ss'))
}

repositories {
    mavenLocal()
    maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repository.jboss.org/" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compile {
        //Avoid conflicting with 'org.hsqldb:hsqldb:2.4.1'
        exclude group: 'hsqldb', module: 'hsqldb'
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    developmentOnly "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.6.Final"
    compile "org.grails.plugins:gsp"
    //compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.0"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-api:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-support:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

    compile 'org.grails.plugins:converters'
    //compile 'org.grails.plugins:grails-java8:1.2.2'
    compile 'javax.media:jai_core:1.1.3'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'

    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "org.apache.tomcat:tomcat-jdbc"

    // plugins
    compile("org.quartz-scheduler:quartz:2.2.3") {
        exclude group: 'slf4j-api', module: 'c3p0'
    }
    compile 'org.grails.plugins:quartz:2.0.13'
    compile 'commons-fileupload:commons-fileupload:1.4'
    implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'

    // plugins needed at runtime but not for compilation
    compile "org.grails.plugins:ala-admin-plugin:2.3.0"
    compile "org.grails.plugins:ala-auth:5.1.0"
    compile "org.grails.plugins:ala-bootstrap3:4.1.0"
    compile "au.org.ala:userdetails-service-client:1.5.0"
    compile 'org.grails.plugins:ala-cors-plugin:0.1-SNAPSHOT'
    compile 'au.org.ala.plugins:openapi:1.1.0'

    //compile 'org.grails.plugins:mail:2.0.0.RC6'

    compile("org.xhtmlrenderer:core-renderer:R8")
    compile("com.lowagie:itext:2.1.0")
    compile 'org.grails.plugins:rendering:2.0.3'

    implementation 'org.grails.plugins:external-config:2.0.0'

    // dependencies
    compile "org.codehaus.jackson:jackson-core-asl:1.8.6"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.8.6"

    compile("au.org.ala:layers-store:2.3.0-SNAPSHOT") {
        exclude module: "ands-pid-client"
        exclude module: "xalan"
    }

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.0'

    compile 'jfree:jfreechart:1.0.13'
    compile 'com.thoughtworks.xstream:xstream:1.4.2' // TODO Upgrade to latest version due to CVEs
    compile 'commons-io:commons-io:2.4'
    testCompile "org.apache.ant:ant:1.8.4"

    compile 'com.github.ziplet:ziplet:2.0.0'

    compile 'org.springframework.boot:spring-boot-starter-data-redis:2.0.0.RELEASE'
    compile 'org.springframework.session:spring-session:1.3.5.RELEASE'

}

configurations {
    all {
        exclude group: "org.slf4j", module: "slf4j-nop"
    }
}

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx2048m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}



assets {
    minifyJs = true
    minifyCss = true
}

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "chromeHeadless"]
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.24.0'
}

tasks.getByName("integrationTest") {
    group JavaBasePlugin.VERIFICATION_GROUP

    //outputs.upToDateWhen { false }  // Always run tests

    systemProperty "geb.build.reportsDir", reporting.file("geb/$name")

    systemProperty "geb.env",  System.properties['driver']?:"firefox"  // firefox by default
    // pass test server by -DbaseUrl
    systemProperty "geb.build.baseUrl", System.properties['baseUrl'] ?: "http://devt.ala.org.au:8080/ws"
    //Store username and password into the default config file
    systemProperty "configFile",System.properties['configFile']?: "/data/spatial-service/test/default.properties"
    //or pass with -Dusername, -Dpassword
    systemProperty "username", System.properties['username']
    systemProperty "password", System.properties['password']
}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=256m'
    testLogging {
        exceptionFormat = 'full'
    }
}

// Refer to FieldCapture: https://github.com/AtlasOfLivingAustralia/fieldcapture/blob/feature/grails4/gradle/publish.gradle
apply plugin:"maven-publish"
publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }

    publications {
        MavenPublication(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            artifact bootWar
        }
    }
}
